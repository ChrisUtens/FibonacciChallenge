//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "FibChallenge"
	Revision           = "0.0"
	GUID               = "{AC54565E-2460-472B-9F99-6A62B4024280}"
	RealtimeTask       = "false"
	CyclicTask         = "true"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(720,180)">
	<Channels>
		<Server Name="ClassSvr" GUID="{1E9F0830-1AB7-40C0-ACA9-75BB0F37A04D}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="SumOfArray" GUID="{5D9F9FBC-9983-40D0-9F38-A95136455BB8}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
	</Channels>
</Class>
*)
FibChallenge : CLASS
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
	SumOfArray 	: SvrCh_DINT;
  //Clients:
  //Variables:
		Array1 : ARRAY [0..35] OF DINT;

		x 	: DINT;
		EvenArray : ARRAY [0..35] OF DINT;

		y 	: DINT;
		z 	: DINT;
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL Init;
	
	FUNCTION VIRTUAL GLOBAL CyWork
		VAR_INPUT
			EAX 	: UDINT;
		END_VAR
		VAR_OUTPUT
			state (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION SumOfEvenFibonacci
		VAR_INPUT
			limit 	: DINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB FibChallenge::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_FIBCHALLENGE
0$UINT, 0$UINT, (SIZEOF(::FibChallenge))$UINT, 
2$UINT, 0$UINT, 0$UINT, 
TO_UDINT(3858999192), "FibChallenge", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::FibChallenge.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
(::FibChallenge.SumOfArray.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3234640323), "SumOfArray", 
//Clients:
END_FUNCTION


#define USER_CNT_FibChallenge 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_FibChallenge] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION FibChallenge::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_FibChallenge, pCmd := #vmt.CmdTable);
	vmt.CmdTable.Init		:= #Init();
	vmt.CmdTable.CyWork		:= #CyWork();
	ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION
(*THE CHALLENGE
Each new term in the Fibonacci sequence is generated by adding the previous two terms.
By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, …

By considering the terms in the Fibonacci sequence whose values do not exceed four million,
find the sum of the even-valued terms*.*)

FUNCTION VIRTUAL GLOBAL FibChallenge::Init
 // Array1 stores the Fibonacci sequence, EvenArray stores the even-valued terms.
 // Initialize the Fibonacci sequence with the first two terms.
 // x represents the index in Array1, y represents the index in EvenArray, and z is a counter for EvenArray.
 Array1[0] := 1;
 Array1[1] := 2;
 SumOfArray:= 0;
 x:= 2;
 y:= 0;
 z:= 0;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL FibChallenge::CyWork
	VAR_INPUT
		EAX 	: UDINT;
	END_VAR
	VAR_OUTPUT
		state (EAX) 	: UDINT;
	END_VAR
  
  SumOfEvenFibonacci(limit:=4000000);

	state := READY;

END_FUNCTION


FUNCTION FibChallenge::SumOfEvenFibonacci
	VAR_INPUT
		limit 	: DINT;
	END_VAR
  
  // Generate the next term in the Fibonacci sequence and calculate the solution.
  // Returns the state as READY when finished.
  // Check if the next Fibonacci term is within the limit.
  if ((Array1[x-2] + Array1[x-1]) <= limit) then
    Array1[x] := Array1[x-2] + Array1[x-1]; 
    x += 1;  
  end_if;

  
  // Check if the current Fibonacci term is not zero and if it is even.
  // If so, add it to EvenArray and update the sum of even-valued terms.
  if Array1[y] <> 0 then
    if !!(Array1[y] MOD 2) then
      EvenArray[z] := Array1[y];
      SumOfArray := SumOfArray + EvenArray[z];
      z += 1;
    end_if;
    y+= 1;
   end_if;
  

END_FUNCTION

(*THE CHALLENGE
Each new term in the Fibonacci sequence is generated by adding the previous two terms.
By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, â€¦

By considering the terms in the Fibonacci sequence whose values do not exceed four million,
find the sum of the even-valued terms*.*)

FUNCTION VIRTUAL GLOBAL FibChallenge::Init
 // Array1 stores the Fibonacci sequence, EvenArray stores the even-valued terms.
 // Initialize the Fibonacci sequence with the first two terms.
 // x represents the index in Array1, y represents the index in EvenArray, and z is a counter for EvenArray.
 Array1[0] := 1;
 Array1[1] := 2;
 SumOfArray:= 0;
 x:= 2;
 y:= 0;
 z:= 0;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL FibChallenge::CyWork
	VAR_INPUT
		EAX 	: UDINT;
	END_VAR
	VAR_OUTPUT
		state (EAX) 	: UDINT;
	END_VAR
  
  SumOfEvenFibonacci(limit:=4000000);

	state := READY;

END_FUNCTION


FUNCTION FibChallenge::SumOfEvenFibonacci
	VAR_INPUT
		limit 	: DINT;
	END_VAR
  
  // Generate the next term in the Fibonacci sequence and calculate the solution.
  // Returns the state as READY when finished.
  // Check if the next Fibonacci term is within the limit.
  if ((Array1[x-2] + Array1[x-1]) <= limit) then
    Array1[x] := Array1[x-2] + Array1[x-1]; 
    x += 1;  
  end_if;

  
  // Check if the current Fibonacci term is not zero and if it is even.
  // If so, add it to EvenArray and update the sum of even-valued terms.
  if Array1[y] <> 0 then
    if !!(Array1[y] MOD 2) then
      EvenArray[z] := Array1[y];
      SumOfArray := SumOfArray + EvenArray[z];
      z += 1;
    end_if;
    y+= 1;
   end_if;
  

END_FUNCTION
